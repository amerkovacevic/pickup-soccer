rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() {
      return request.auth != null;
    }

    function participantUids(participants) {
      return participants.map(participant, participant.uid);
    }

    function addedParticipantUids(existingParticipants, newParticipants) {
      let newUids = participantUids(newParticipants);
      let existingUids = participantUids(existingParticipants);
      return newUids.where(uid, !existingUids.hasAny([uid]));
    }

    function removedParticipantUids(existingParticipants, newParticipants) {
      let newUids = participantUids(newParticipants);
      let existingUids = participantUids(existingParticipants);
      return existingUids.where(uid, !newUids.hasAny([uid]));
    }

    function participantsUnchangedExcept(existingParticipants, newParticipants, uid) {
      return existingParticipants.every(participant,
          participant.uid == uid || newParticipants.hasAny([participant]))
        && newParticipants.every(participant,
          participant.uid == uid || existingParticipants.hasAny([participant]));
    }

    function isJoin(existingParticipants, newParticipants) {
      let addedUids = addedParticipantUids(existingParticipants, newParticipants);
      let removedUids = removedParticipantUids(existingParticipants, newParticipants);
      return addedUids.size() == 1
        && addedUids[0] == request.auth.uid
        && removedUids.size() == 0
        && participantsUnchangedExcept(existingParticipants, newParticipants, request.auth.uid);
    }

    function isLeave(existingParticipants, newParticipants) {
      let addedUids = addedParticipantUids(existingParticipants, newParticipants);
      let removedUids = removedParticipantUids(existingParticipants, newParticipants);
      return addedUids.size() == 0
        && removedUids.size() == 1
        && removedUids[0] == request.auth.uid
        && participantsUnchangedExcept(existingParticipants, newParticipants, request.auth.uid);
    }

    function isParticipantUpdateAllowed(existingParticipants, newParticipants) {
      return isJoin(existingParticipants, newParticipants)
        || isLeave(existingParticipants, newParticipants);
    }

    match /games/{gameId} {
      allow read: if true;

      allow create: if isSignedIn()
        && request.resource.data.createdBy == request.auth.uid
        && request.resource.data.participants is list
        && request.resource.data.participants.size() == 1
        && request.resource.data.participants[0].uid == request.auth.uid;

      allow update: if isSignedIn()
        && request.resource.data.diff(resource.data).changedKeys().hasOnly(['participants'])
        && request.resource.data.participants is list
        && resource.data.participants is list
        && isParticipantUpdateAllowed(resource.data.participants, request.resource.data.participants);
    }

    match /players/{playerId} {
      allow read: if isSignedIn();

      allow create, update: if isSignedIn()
        && request.auth.uid == playerId;
    }
  }
}
