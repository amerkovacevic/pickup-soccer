rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() {
      return request.auth != null;
    }

    match /games/{gameId} {
      allow read: if true;

      allow create: if isSignedIn()
        && request.resource.data.createdBy == request.auth.uid
        && request.resource.data.participants is list
        && request.resource.data.participants.size() == 1
        && request.resource.data.participants[0].uid == request.auth.uid;

      allow update: if isSignedIn()
        && request.resource.data.diff(resource.data).changedKeys().hasOnly(['participants'])
        && request.resource.data.participants is list
        && resource.data.participants is list
        && (
          let addedParticipants = request.resource.data.participants.where(participant, !resource.data.participants.hasAny([participant]));
          let removedParticipants = resource.data.participants.where(participant, !request.resource.data.participants.hasAny([participant]));
          (
            request.resource.data.participants.size() == resource.data.participants.size() + 1
            && addedParticipants.size() == 1
            && addedParticipants[0].uid == request.auth.uid
            && removedParticipants.size() == 0
          )
          || (
            request.resource.data.participants.size() == resource.data.participants.size() - 1
            && removedParticipants.size() == 1
            && removedParticipants[0].uid == request.auth.uid
            && addedParticipants.size() == 0
          )
        );
    }

    match /players/{playerId} {
      allow read: if isSignedIn();

      allow create, update: if isSignedIn()
        && request.auth.uid == playerId;
    }
  }
}
