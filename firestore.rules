rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() {
      return request.auth != null;
    }

    function participantWithUid(participants, uid) {
      return participants.where(participant, participant.uid == uid);
    }

    function participantExists(participants, uid) {
      return participantWithUid(participants, uid).size() == 1;
    }

    function otherParticipantsUnchanged(existingParticipants, newParticipants, uid) {
      return existingParticipants.every(participant,
        participant.uid == uid || otherParticipantMatches(participant, newParticipants));
    }

    function otherParticipantMatches(participant, newParticipants) {
      let updated = participantWithUid(newParticipants, participant.uid);
      return updated.size() == 1 && updated[0] == participant;
    }

    function noOtherParticipantChanged(existingParticipants, newParticipants, uid) {
      return otherParticipantsUnchanged(existingParticipants, newParticipants, uid)
        && otherParticipantsUnchanged(newParticipants, existingParticipants, uid);
    }

    function isJoin(existingParticipants, newParticipants) {
      return newParticipants.size() == existingParticipants.size() + 1
        && participantExists(newParticipants, request.auth.uid)
        && !participantExists(existingParticipants, request.auth.uid)
        && noOtherParticipantChanged(existingParticipants, newParticipants, request.auth.uid);
    }

    function isLeave(existingParticipants, newParticipants) {
      return existingParticipants.size() == newParticipants.size() + 1
        && participantExists(existingParticipants, request.auth.uid)
        && !participantExists(newParticipants, request.auth.uid)
        && noOtherParticipantChanged(existingParticipants, newParticipants, request.auth.uid);
    }

    function isParticipantUpdateAllowed(existingParticipants, newParticipants) {
      return isJoin(existingParticipants, newParticipants)
        || isLeave(existingParticipants, newParticipants);
    }

    match /games/{gameId} {
      allow read: if true;

      allow create: if isSignedIn()
        && request.resource.data.createdBy == request.auth.uid
        && request.resource.data.participants is list
        && request.resource.data.participants.size() == 1
        && request.resource.data.participants[0].uid == request.auth.uid;

      allow update: if isSignedIn()
        && request.writeFields.hasOnly(['participants'])
        && resource.data.participants is list
        && getAfter(/databases/$(database)/documents/games/$(gameId)).data.participants is list
        && isParticipantUpdateAllowed(
          resource.data.participants,
          getAfter(/databases/$(database)/documents/games/$(gameId)).data.participants,
        );
    }

    match /players/{playerId} {
      allow read: if isSignedIn();

      allow create, update: if isSignedIn()
        && request.auth.uid == playerId;
    }
  }
}
