rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() {
      return request.auth != null;
    }

    match /games/{gameId} {
      allow read: if true;

      allow create: if isSignedIn()
        && request.resource.data.createdBy == request.auth.uid
        && request.resource.data.participants is list
        && request.resource.data.participants.size() == 1
        && request.resource.data.participants[0].uid == request.auth.uid;

      allow update: if isSignedIn()
        && request.resource.data.diff(resource.data).changedKeys().hasOnly(['participants'])
        && request.resource.data.participants is list
        && resource.data.participants is list
        && (
          let newParticipants = request.resource.data.participants;
          let existingParticipants = resource.data.participants;
          let newParticipantUids = newParticipants.map(participant, participant.uid);
          let existingParticipantUids = existingParticipants.map(participant, participant.uid);
          let addedUids = newParticipantUids.where(uid, !existingParticipantUids.hasAny([uid]));
          let removedUids = existingParticipantUids.where(uid, !newParticipantUids.hasAny([uid]));
          (
            // Joining a game by adding yourself to the participants list.
            addedUids.size() == 1
            && addedUids[0] == request.auth.uid
            && removedUids.size() == 0
            && existingParticipants.every(participant, newParticipants.hasAny([participant]))
            && newParticipants.every(participant,
              existingParticipants.hasAny([participant]) || participant.uid == request.auth.uid)
          )
          || (
            // Leaving a game by removing yourself from the participants list.
            addedUids.size() == 0
            && removedUids.size() == 1
            && removedUids[0] == request.auth.uid
            && newParticipants.every(participant, existingParticipants.hasAny([participant]))
            && existingParticipants.every(participant,
              newParticipants.hasAny([participant]) || participant.uid == request.auth.uid)
          )
        );
    }

    match /players/{playerId} {
      allow read: if isSignedIn();

      allow create, update: if isSignedIn()
        && request.auth.uid == playerId;
    }
  }
}
