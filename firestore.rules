rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() {
      return request.auth != null;
    }

    match /groups/{groupId} {
      function updatedMembers() {
        return getAfter(/databases/$(database)/documents/groups/$(groupId)).data.members;
      }

      allow read: if true;

      allow create: if isSignedIn()
        && request.resource.data.ownerId == request.auth.uid
        && request.resource.data.members is list
        && request.resource.data.members.size() == 1
        && request.resource.data.members.hasOnly([request.auth.uid]);

      allow update: if isSignedIn()
        && request.resource.data.diff(resource.data).changedKeys().hasOnly(['members'])
        && updatedMembers() is list
        && updatedMembers().hasAll(resource.data.members)
        && updatedMembers().size() == resource.data.members.size() + 1
        && updatedMembers().where(member, !resource.data.members.hasAny([member])).size() == 1
        && (
          updatedMembers().where(member, !resource.data.members.hasAny([member]))[0] == request.auth.uid
          || resource.data.ownerId == request.auth.uid
        );
    }

    match /games/{gameId} {
      function updatedParticipants() {
        return getAfter(/databases/$(database)/documents/games/$(gameId)).data.participants;
      }

      allow read: if true;

      allow create: if isSignedIn()
        && request.resource.data.createdBy == request.auth.uid
        && request.resource.data.participants is list
        && request.resource.data.participants.size() == 1
        && request.resource.data.participants[0].uid == request.auth.uid;

      allow update: if isSignedIn()
        && request.resource.data.diff(resource.data).changedKeys().hasOnly(['participants'])
        && updatedParticipants() is list
        && updatedParticipants().hasAll(resource.data.participants)
        && updatedParticipants().size() == resource.data.participants.size() + 1
        && updatedParticipants().where(participant, !resource.data.participants.hasAny([participant])).size() == 1
        && updatedParticipants().where(participant, !resource.data.participants.hasAny([participant]))[0].uid == request.auth.uid;
    }

    match /players/{playerId} {
      allow read: if isSignedIn();

      allow create, update: if isSignedIn()
        && request.auth.uid == playerId;
    }
  }
}
