rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() {
      return request.auth != null;
    }

    function participantExists(participants, uid) {
      return participantExistsAtIndex(participants, uid, 0);
    }

    function participantExistsAtIndex(participants, uid, index) {
      return index >= participants.size()
        ? false
        : participants[index].uid == uid
          ? true
          : participantExistsAtIndex(participants, uid, index + 1);
    }

    function participantsMatchWithoutUid(longerList, shorterList, uid) {
      return participantsMatchWithoutUidAtIndex(longerList, shorterList, uid, 0, 0, false);
    }

    function participantsMatchWithoutUidAtIndex(longerList, shorterList, uid, longIndex, shortIndex, skipped) {
      return longIndex >= longerList.size()
        ? shortIndex >= shorterList.size() && skipped
        : !skipped && longerList[longIndex].uid == uid
          ? participantsMatchWithoutUidAtIndex(longerList, shorterList, uid, longIndex + 1, shortIndex, true)
          : shortIndex >= shorterList.size()
            ? false
            : longerList[longIndex] != shorterList[shortIndex]
              ? false
              : participantsMatchWithoutUidAtIndex(longerList, shorterList, uid, longIndex + 1, shortIndex + 1, skipped);
    }

    function isJoin(existingParticipants, newParticipants) {
      return newParticipants.size() == existingParticipants.size() + 1
        && participantExists(newParticipants, request.auth.uid)
        && !participantExists(existingParticipants, request.auth.uid)
        && participantsMatchWithoutUid(newParticipants, existingParticipants, request.auth.uid);
    }

    function isLeave(existingParticipants, newParticipants) {
      return existingParticipants.size() == newParticipants.size() + 1
        && participantExists(existingParticipants, request.auth.uid)
        && !participantExists(newParticipants, request.auth.uid)
        && participantsMatchWithoutUid(existingParticipants, newParticipants, request.auth.uid);
    }

    function isParticipantUpdateAllowed(existingParticipants, newParticipants) {
      return isJoin(existingParticipants, newParticipants)
        || isLeave(existingParticipants, newParticipants);
    }

    match /games/{gameId} {
      allow read: if true;

      allow create: if isSignedIn()
        && request.resource.data.createdBy == request.auth.uid
        && request.resource.data.participants is list
        && request.resource.data.participants.size() == 1
        && request.resource.data.participants[0].uid == request.auth.uid;

      allow update: if isSignedIn()
        && request.writeFields.hasOnly(['participants'])
        && resource.data.participants is list
        && getAfter(/databases/$(database)/documents/games/$(gameId)).data.participants is list
        && isParticipantUpdateAllowed(
          resource.data.participants,
          getAfter(/databases/$(database)/documents/games/$(gameId)).data.participants
        );
    }

    match /players/{playerId} {
      allow read: if isSignedIn();

      allow create, update: if isSignedIn()
        && request.auth.uid == playerId;
    }
  }
}
